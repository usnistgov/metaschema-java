/*
 * Portions of this software was developed by employees of the National Institute
 * of Standards and Technology (NIST), an agency of the Federal Government and is
 * being made available as a public service. Pursuant to title 17 United States
 * Code Section 105, works of NIST employees are not subject to copyright
 * protection in the United States. This software may be subject to foreign
 * copyright. Permission in the United States and in foreign countries, to the
 * extent that NIST may hold copyright, to use, copy, modify, create derivative
 * works, and distribute this software and its documentation without fee is hereby
 * granted on a non-exclusive basis, provided that this notice and disclaimer
 * of warranty appears in all copies.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
 * INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
 * SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE.  IN NO EVENT
 * SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
 * INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM,
 * OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
 * PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
 * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
 */

package gov.nist.secauto.metaschema.schemagen.json.schema;

import com.fasterxml.jackson.databind.node.ObjectNode;

import gov.nist.secauto.metaschema.schemagen.SchemaGenerationException;
import gov.nist.secauto.metaschema.schemagen.json.JsonGenerationState;

import edu.umd.cs.findbugs.annotations.NonNull;

/**
 * A JSON schema construct, which may be a sub-schema.
 */
public interface IJsonSchema {
  // /**
  // * Determine if the type is generated by the schema generator.
  // * <p>
  // * Built-in types are not generated by the schema generator.
  // *
  // * @param state
  // * the schema generation state used for context
  // * @return {@code true} if the type is generated by the schema generator or
  // {@code false}
  // otherwise
  // */
  // boolean isGenerated(@NonNull JsonGenerationState state);

  boolean isInline(@NonNull JsonGenerationState state);

  /**
   * Generate the schema type.
   *
   * @param state
   *          the schema generation state used for context and writing
   * @param obj
   *          the parent JSON object to populate
   * @throws SchemaGenerationException
   *           if an error occurred while writing the type
   */
  void generateSchema(@NonNull JsonGenerationState state, @NonNull ObjectNode obj);

  default void generateSchemaOrRef(@NonNull JsonGenerationState state, @NonNull ObjectNode obj) {
    // by default generate the schema
    generateSchema(state, obj);
  }

  void resolveSubSchemas(@NonNull JsonGenerationState state);
}
